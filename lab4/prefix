%{#include <string>
%}

%token %<std::string%> : _STR VARIABLE 
%token %<std::string%> : _STR INTEGER 
%token %<void%> EQ 
%token %<void%> NEQ
%token %<void%> LT
%token %<void%> GT
%token %<void%> ASSIGN
%token %<void%> IF
%token %<void%> IFELSE
%token %<void%> PRINT
%token %<void%> FALSE
%token %<void%> TRUE
%token %<void%> PLUS
%token %<void%> MINUS
%token %<void%> MUL
%token %<void%> DIV
%token %<void%> NOT
%token %<void%> AND
%token %<void%> OR
%token %<void%> EXP

%type %<std::string%> start[]
%type %<std::string%> expr[]
%type %<std::string%> int_expr[]
%type %<std::string%> bool_expr[]
%type %<std::string%> list_expr[]

%%

start:
      list_expr ${ res = _s1; $} |;

list_expr:
    ${ res = ""; $}
|   expr list_expr ${ res = _s1 + "\n" + _s2; $}
|;

expr:
    IF bool_expr expr ${ res = "if " + _s2 + "{\n" + _s3  + "\n}"; $} 
|   IFELSE bool_expr expr expr ${ res = "if " + _s2 + " {\n" + _s3  + "\n}" + " else { \n" + _s4 + "\n}"; $} 
|   ASSIGN VARIABLE int_expr ${ res = _s2 + " := " + _s3; $} 
|   PRINT int_expr ${ res = "print " + _s2; $} 
|;

int_expr:
    INTEGER ${ res = _s1; $}
|   MINUS int_expr int_expr ${ res = "(" + _s2 + " - " + _s3 + ")"; $}
|   PLUS int_expr int_expr ${ res = "(" + _s2 + " + " + _s3 + ")"; $}
|   MUL int_expr int_expr ${ res = "(" + _s2 + " * " + _s3 + ")"; $}
|   DIV int_expr int_expr ${ res = "(" + _s2 + " / " + _s3 + ")"; $}
|   EXP int_expr int_expr ${ res = "(" + _s3 + "^" + _s2 + ")"; $}
|   VARIABLE ${ res = _s1; $}
|;

bool_expr:
    TRUE ${ res = "true"; $}
|   FALSE ${ res = "false"; $}
|   NOT bool_expr ${ res = "not " + _s2; $}
|   AND bool_expr bool_expr ${ res = "(" + _s2 + " and " + _s3 + ")"; $}
|   OR bool_expr bool_expr ${ res = ("(" + _s2 + " or " + _s3 + ")"); $}
|   GT int_expr int_expr ${ res = "(" + _s2 + " > " + _s3 + ")"; $}
|   LT int_expr int_expr ${ res = "(" + _s2 + " < " + _s3 + ")"; $}
|   EQ int_expr int_expr ${ res = "(" + _s2 + " == " + _s3 + ")"; $}
|   NEQ int_expr int_expr ${ res = "(" + _s2 + " != " + _s3 + ")"; $}
|;

%%
