%{#include <string>
#include <vector>
#include <iostream>
#include "tree.h"
%}

%token %<std::string%> : _STR VAR
%token %<void%> COMMA 
%token %<void%> SEMICOLON  
%token %<void%> DEREF 

%type %<std::vector<std::pair<std::string, std::string> > %> start[]
%type %<std::vector<std::pair<std::string, std::string> > %> decl[]
%type %<std::vector<std::pair<std::string, std::string> > %> list[%<std::string%>]
%type %<std::vector<std::pair<std::string, std::string> > %> list_end[%<std::string%>]
%type %<std::pair<std::string, std::string>%> var[%<std::string%>]

%%

start:
${ res = std::vector<std::pair<std::string, std::string> >();  $}
| decl start ${ res = _s1; res.insert(res.end(), _s2.begin(), _s2.end());  $}|;

decl:
VAR list[_s1] SEMICOLON ${ res = _s2; $} |;

var:
VAR ${ res = std::pair<std::string, std::string>(_h1, _s1); $}
| DEREF var[_h1] ${ res = std::pair<std::string, std::string>(_s2.first + "*", _s2.second); $}
|; 

list:
var[_h1] list_end[_h1] ${ res = _s2; std::cout << _s1.first << " : " << _s1.second << std::endl; $} |;

list_end:
${ res = std::vector<std::pair<std::string, std::string> >(); $}
| COMMA list[_h1] ${res = _s2; $} |;

%%

